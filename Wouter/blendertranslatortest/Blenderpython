import bpy
import bmesh
import os
import ctypes


os.chdir(".\\")
translib = ctypes.cdll.LoadLibrary("H:/Desktop/Music Projects/School/Jaar 2/RayTracedIR/RayTracedIR/Wouter/blendertranslatortest/cpptest.dll")

class DataSorter(object):
    def __init__(self, val):
        translib.DataSorter_new.argtypes = [ctypes.c_int]
        translib.DataSorter_new.restype = ctypes.c_void_p
        translib.DataSorter_insert.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_float, ctypes.c_float, ctypes.c_float]
        translib.DataSorter_insert.restype = ctypes.c_void_p
        translib.Foo_foobar.argtypes = [ctypes.c_void_p, ctypes.c_int]
        translib.Foo_foobar.restype = ctypes.c_int
        self.obj = translib.DataSorter_new(val)
    def insert(self, val):
        translib.DataSorter_insert(self.obj, val[0], val[1], val[2], val[3])
    
    def foobar(self, val):
        return translib.Foo_foobar(self.obj, val)

for obj in bpy.data.objects:
    print(obj.name)
    
objectje = bpy.data.objects["Cube"]
vertices = [v.co for v in objectje.data.vertices]
faces = bmesh.from_edit_mesh(objectje.data).faces
print(vertices)
ds=DataSorter(len(faces))

q = 0;
for f in bmesh.from_edit_mesh(objectje.data).faces:
    if f.select:
        print(f.index)
        for v in bmesh.from_edit_mesh(objectje.data).verts:
            ds.insert([q, v.co[0], v.co[1], v.co[2]])
            print(v.index, v.co)
        q += 1
            
#for f in bmesh.from_edit_mesh(objectje.data).faces:
#    print(f.index)
#    i = 0
#    for v in faces[f.index].verts:
#        print(v)
#        vexlist = [faces[f.index].verts[i].co[0],faces[f.index].verts[i].co[1],faces[f.index].verts[i].co[2]]
#        print(vexlist)
#        print(f.index, faces[f.index].verts[i].co)
#        i+=1

#print(len(objectje.data.polygons[0].vertices))
#print(faces[1].verts[1].co) 